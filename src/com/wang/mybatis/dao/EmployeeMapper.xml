<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wang.mybatis.dao.EmployeeMapper">
    <!--
    namespace:名称空间;指定为接口的全类名
    id：唯一标识
    resultType：返回值类型
    #{id}：从传递过来的参数中取出id值

    public Employee getEmpById(Integer id);
     -->
    <select id="getEmpById" resultType="com.wang.mybatis.beans.Employee">
		select * from mybatis_employee where id = #{id}
	</select>

    <!-- parameterType：参数类型，可以省略，
	获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
    <!--添加方法-->
    <insert id="addEmp" parameterType="employee" useGeneratedKeys="true" keyProperty="id" >
        insert into mybatis_employee(id,last_name,email) values(#{id},#{lastName},#{email})
    </insert>

    <!--
	获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
    <insert id="addEmpToOracle" databaseId="oracle">
        <!--
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER：当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序：
            先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
            在运行插入的sql；就可以取出id属性对应的值
        AFTER运行顺序：
            先运行插入的sql（从序列中取出新值作为id）；
            再运行selectKey查询id的sql；
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER：
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->})
        <!-- AFTER：
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email}) -->
    </insert>

    <!--更新方法 这里多个查询参数使用@Param绑定参数-->
    <update id="updateEmp" >
        update mybatis_employee set last_name=#{lastName} where id=#{id}
    </update>

    <!--根据id删除-->
    <delete id="deleteEmp" >
        delete from mybatis_employee where id=#{id}
    </delete>

    <!--多个查询条件是Pojo的属性，我们也可以传入pojo-->
    <select id="getEmpByIdAndLastName" resultType="Employee" >
        select * from mybatis_employee where id = #{id} and last_name = #{lastName}
    </select>

    <!--多个查询条件不是Pojo的属性，我们也可以传入Map-->
    <select id="getEmpByMap" resultType="employee" >
        select * from mybatis_employee where id = #{id} and last_name = #{lastName}
    </select>

    <!--模糊查询 返回值为集合 这里resultType仍为集合中元素的类型 mybatis会帮我们自动封装为集合-->
    <select id="getEmpBylastNameLike" resultType="employee" >
        select * from mybatis_employee where last_name like #{lastName}
    </select>

    <!--返回一个map-->
    <select id="getEmpByIdResultTypeMap" resultType="map" >
        select * from mybatis_employee where id = #{id}
    </select>

    <!--返回一个map的集合-->
    <select id="getEmpBylastNameLikeAsMap" resultType="map" >
        select * from mybatis_employee where last_name like #{lastName}
    </select>

    <!--根据部门id 返回一个list的集合-->
    <select id="getEmpByDid" resultType="employee" >
        select * from mybatis_employee where d_id = #{deptId}
    </select>
</mapper>