<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wang.mybatis.dao.EmployeeMapperPlus">


    <!--自定义某个javaBean的封装规则
    type：自定义规则的Java类型
    id:唯一id方便引用
      -->
    <resultMap id="MyEmp" type="Employee" >
        <!--指定主键列的封装规则
		id定义主键会底层有优化；
		column：指定哪一列
		property：指定对应的javaBean属性
		  -->
        <id column="id" property="id" ></id>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName" ></result>
        <!-- 其他不指定的列会自动封装：建议我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="email" property="email" ></result>
    </resultMap>

    <!-- resultMap:自定义结果集映射规则；  -->
    <select id="getEmpById" resultMap="MyEmp">
        select * from mybatis_employee where id = #{id}
    </select>

    <resultMap id="MyEmpDept_1" type="Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <!--使用级联属性-->
        <result column="did" property="department.id"></result>
        <result column="dept_name" property="department.deptName" ></result>
    </resultMap>

    <!-- ==================association============================ -->
    <!--
		使用association定义关联的单个对象的封装规则；
	 -->
    <resultMap id="MyEmpDept_2" type="Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <!--  association可以指定联合的javaBean对象
		property="dept"：指定哪个属性是联合的对象
		javaType:指定这个属性对象的类型[不能省略]
		-->
       <association property="department" javaType="Department">
           <id column="did" property="id" ></id>
           <result column="dept_name" property="deptName"></result>
       </association>
    </resultMap>
    <!--关联查询-->
    <select id="getEmpAndDeptById" resultMap="MyEmpDept_2">
        select e.id id,e.last_name last_name,e.email  email, e.d_id d_id, d.id did, d.dept_name dept_name from mybatis_employee e, mybatis_department d where e.d_id = d.id and e.id = #{id}
    </select>

    <!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
    <resultMap id="MyEmpDept_3" type="Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <!-- association定义关联对象的封装规则
	 		select:表明当前属性是调用select指定的方法查出的结果
	 		column:指定将哪一列的值传给这个方法
	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
	 	 -->
        <association property="department" select="com.wang.mybatis.dao.DepartmentMapper.getDeptById"
                     column="d_id" ></association>
    </resultMap>
    <select id="getEmpAndDeptByIdStep" resultMap="MyEmpDept_3">
        select * from  mybatis_employee where id = #{id}
    </select>

    <!-- 可以使用延迟加载（懒加载）；(按需加载)
    Employee==>Dept：
        我们每次查询Employee对象的时候，都将一起查询出来。
        部门信息在我们使用的时候再去查询；
        分段查询的基础之上加上两个配置：
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
    -->
    <!-- ==================association============================ -->

    <!--了解一下 用的非常少-->
    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是hello：就把部门信息查询出来，否则不查询；
            如果查出的是testAddEmp，把last_name这一列的值赋值给email;
     -->
    <resultMap id="MyEmpDept_4" type="Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <!--
	 		column：指定判定的列名
	 		javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="last_name">
            <!--resultType/resultMap:指定封装的结果类型；不能缺少。-->
            <case value="hello" resultType="Employee">
                <association property="department" select="com.wang.mybatis.dao.DepartmentMapper.getDeptById"
                             column="d_id" ></association>
            </case>
            <case value="testAddEmp" resultType="Employee">
                <id column="id" property="id"></id>
                <result column="last_name" property="lastName"></result>
                <result column="last_name" property="email"></result>
            </case>
        </discriminator>
    </resultMap>
    <select id="getEmpAndDeptByIdStepDiscriminator" resultMap="MyEmpDept_4">
        select * from  mybatis_employee where id = #{id}
    </select>

</mapper>